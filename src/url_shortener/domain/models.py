"""
Domain models for the URL shortener.

These classes represent the persistent objects in our system.  The
``ShortURL`` entity encapsulates the information needed to map an original
URL to a shortened code.  It also tracks metadata such as creation time,
optional expiration, and access count.  We use dataclasses to concisely
define the model while still permitting methods for behaviour such as
incrementing hit counts.
"""

from __future__ import annotations

from dataclasses import dataclass, field
from datetime import datetime
from typing import Optional


@dataclass
class ShortURL:
    """Entity representing a shortened URL.

    Attributes:
        id: A unique numeric identifier assigned by the repository.  This
            identifier is used internally and is not exposed to end users.
        original_url: The full, canonical URL that the user wishes to shorten.
        short_code: The unique slug or token used to reference this URL
            externally.  The code is generated by a ``CodeGenerator`` and
            should be unique within the system.  Consumers use this code to
            resolve back to the ``original_url``.
        created_at: Timestamp when this entity was created.  Defaults to the
            current UTC time on instantiation.
        expires_at: Optional timestamp indicating when the link should no
            longer be considered valid.  A ``None`` value signifies no
            expiration.
        hits: A counter tracking how many times the shortened link has been
            resolved.  This value is incremented each time the link is
            accessed via the service.
    """

    id: int
    original_url: str
    short_code: str
    created_at: datetime = field(default_factory=lambda: datetime.utcnow())
    expires_at: Optional[datetime] = None
    hits: int = 0

    def increment_hits(self) -> None:
        """Increment the access counter.

        This method should be invoked each time a consumer resolves the short
        code to its original URL.  It mutates the entity in place.
        """
        self.hits += 1
